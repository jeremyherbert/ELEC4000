#include "Msp430Adc12.h"
#include "printf.h"
#include "clap.h"

module AdcSimpleC {
  provides {
    interface AdcConfigure<const msp430adc12_channel_config_t*> as VoltageConfigure;
  }
  uses {
    interface Boot;
    interface Read<uint16_t> as VoltageRead;
    interface Leds;
    interface Timer<TMilli>;

    interface GlobalTime<TMilli>;
    interface TimeSyncInfo;
    interface PacketTimeStamp<TMilli,uint32_t>;

    interface Receive;
    interface AMSend;
    interface Packet;
    interface AMPacket;
    interface SplitControl as RadioControl;

  }
}
implementation {

  const msp430adc12_channel_config_t config = {
      /*inch: SUPPLY_VOLTAGE_HALF_CHANNEL,*/
      inch: INPUT_CHANNEL_A3,
      sref: REFERENCE_VREFplus_AVss,
      ref2_5v: REFVOLT_LEVEL_1_5,
      adc12ssel: SHT_SOURCE_ACLK,
      adc12div: SHT_CLOCK_DIV_1,
      sht: SAMPLE_HOLD_4_CYCLES,
      sampcon_ssel: SAMPCON_SOURCE_SMCLK,
      sampcon_id: SAMPCON_CLOCK_DIV_1
  };

   //sampling frequency in binary milliseconds
  #define SAMPLING_FREQUENCY 15

  //#define THRESHOLD 300
  uint8_t sampling = 0;
  uint8_t level = 0;
  uint8_t syncTimer = 0;
  bool radioReady = TRUE;

  message_t msg;

  event void Boot.booted() {
	call Leds.led0Off();
	call Leds.led1Off();
	call Leds.led2Off();
	
         
	call RadioControl.start();
  }


  event void VoltageRead.readDone( error_t result, uint16_t val )
  {
    if (result == SUCCESS){
        if (sampling) {
            //printf("%i\n", val);
            call Leds.led0On();
            if (val > THRESHOLD) {
                if (level < 255) level++;
            } else {
                if (level > 0) level--;
            }
        call VoltageRead.read();
        }


//	printf("Here is a uint16: %u\n", val);
//	printfflush();
    }
   }

  async command const msp430adc12_channel_config_t* VoltageConfigure.getConfiguration()
  {
    return &config; // must not be changed
  }

  event void Timer.fired() 
  {
	uint32_t currGlobTime;
	clap_msg * cm = (clap_msg*)(call Packet.getPayload(&msg, sizeof (clap_msg)));
		

	if(syncTimer == 0 && TOS_NODE_ID == 0 && radioReady== TRUE){
			call AMSend.send(AM_BROADCAST_ADDR, &msg, sizeof(msg));
			radioReady = FALSE;
	}	
	syncTimer = syncTimer++ % 1000;
	
	//if (syncTimer % 300 == 0) call Leds.led2Toggle();

        sampling ^= 0x01;

        if (sampling == 0) {
            //printf("l:%i\n", level);
            if ((level >= 2) && (level < 15)) {
                printf("clap\n");
                printfflush();
                level = 0;
            	
		currGlobTime = call GlobalTime.getLocalTime();
		call GlobalTime.getGlobalTime(&currGlobTime);

                cm->id = TOS_NODE_ID;
		cm->time = currGlobTime;
		call AMSend.send(AM_BROADCAST_ADDR, &msg, sizeof(clap_msg));


	    }
        }

        call VoltageRead.read();
  }



  event message_t* Receive.receive(message_t* msgPtr, void* payload, uint8_t len)
  {
	uint32_t rxTimestamp;	

	if(TOS_NODE_ID != 0){
		rxTimestamp = call PacketTimeStamp.timestamp(msgPtr);
        	call GlobalTime.local2Global(&rxTimestamp);
	}

	return msgPtr;
  }


   event void AMSend.sendDone(message_t* ptr, error_t success) {
	radioReady = TRUE;
	return;
    }

	
	event void RadioControl.startDone(error_t err){
		if (err == SUCCESS) {
			call Timer.startPeriodic(SAMPLING_FREQUENCY);
			radioReady = TRUE;
		} else {
			call RadioControl.start();
		}
	}

    event void RadioControl.stopDone(error_t error){}



}
