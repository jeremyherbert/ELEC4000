#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'ReportMatrixMsg'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 25

# The Active Message type associated with this message.
AM_TYPE = 12

class ReportMatrixMsg(tinyos.message.Message.Message):
    # Create a new ReportMatrixMsg of size 25.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=25):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <ReportMatrixMsg> \n"
        try:
            pass
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: rssi
    #   Field type: byte[][]
    #   Offset (bits): 0
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'rssi' is signed (False).
    #
    def isSigned_rssi(self):
        return False
    
    #
    # Return whether the field 'rssi' is an array (True).
    #
    def isArray_rssi(self):
        return True
    
    #
    # Return the offset (in bytes) of the field 'rssi'
    #
    def offset_rssi(self, index1, index2):
        offset = 0
        if index1 < 0 or index1 >= 5:
            raise IndexError
        offset += 0 + index1 * 40
        if index2 < 0 or index2 >= 5:
            raise IndexError
        offset += 0 + index2 * 8
        return (offset / 8)
    
    #
    # Return the offset (in bits) of the field 'rssi'
    #
    def offsetBits_rssi(self, index1, index2):
        offset = 0
        if index1 < 0 or index1 >= 5:
            raise IndexError
        offset += 0 + index1 * 40
        if index2 < 0 or index2 >= 5:
            raise IndexError
        offset += 0 + index2 * 8
        return offset
    
    #
    # Return the entire array 'rssi' as a byte[][]
    #
    def get_rssi(self):
        tmp = [[None]*5]*5
        for index0 in range (0, self.numElements_rssi(0)):
            for index1 in range (0, self.numElements_rssi(1)):
                    tmp[index0][index1] = self.getElement_rssi(index0,index1)
        return tmp
    
    #
    # Set the contents of the array 'rssi' from the given byte[][]
    #
    def set_rssi(self, value):
        for index0 in range(0, len(value)):
            for index1 in range(0, len(value)):
                self.setElement_rssi(index0,index1, value[index0][index1])

    #
    # Return an element (as a byte) of the array 'rssi'
    #
    def getElement_rssi(self, index1, index2):
        return self.getSIntElement(self.offsetBits_rssi(index1, index2), 8, 1)
    
    #
    # Set an element of the array 'rssi'
    #
    def setElement_rssi(self, index1, index2, value):
        self.setSIntElement(self.offsetBits_rssi(index1, index2), 8, value, 1)
    
    #
    # Return the total size, in bytes, of the array 'rssi'
    #
    def totalSize_rssi(self):
        return (200 / 8)
    
    #
    # Return the total size, in bits, of the array 'rssi'
    #
    def totalSizeBits_rssi(self):
        return 200
    
    #
    # Return the size, in bytes, of each element of the array 'rssi'
    #
    def elementSize_rssi(self):
        return (8 / 8)
    
    #
    # Return the size, in bits, of each element of the array 'rssi'
    #
    def elementSizeBits_rssi(self):
        return 8
    
    #
    # Return the number of dimensions in the array 'rssi'
    #
    def numDimensions_rssi(self):
        return 2
    
    #
    # Return the number of elements in the array 'rssi'
    # for the given dimension.
    #
    def numElements_rssi(self, dimension):
        array_dims = [ 5, 5,  ]
        if dimension < 0 or dimension >= 2:
            raise IndexException
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
    
